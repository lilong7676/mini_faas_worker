import*as e from"../../core/common/common.js";import*as a from"../../core/i18n/i18n.js";import*as n from"../../core/sdk/sdk.js";import*as t from"../../panels/mobile_throttling/mobile_throttling.js";import*as r from"../../ui/legacy/components/utils/utils.js";const i={main:"Main"},o=a.i18n.registerUIStrings("entrypoints/worker_app/WorkerMain.ts",i),s=a.i18n.getLocalizedString.bind(void 0,o);let g;class c{static instance(e={forceNew:null}){const{forceNew:a}=e;return g&&!a||(g=new c),g}async run(){n.Connections.initMainConnection((async()=>{await n.TargetManager.TargetManager.instance().maybeAttachInitialTarget()||n.TargetManager.TargetManager.instance().createTarget("main",s(i.main),n.Target.Type.ServiceWorker,null)}),r.TargetDetachedDialog.TargetDetachedDialog.webSocketConnectionLost),new t.NetworkPanelIndicator.NetworkPanelIndicator}}e.Runnable.registerEarlyInitializationRunnable(c.instance),n.ChildTargetManager.ChildTargetManager.install((async({target:e,waitingForDebugger:a})=>{if(e.parentTarget()||e.type()!==n.Target.Type.ServiceWorker||!a)return;const t=e.model(n.DebuggerModel.DebuggerModel);t&&(t.isReadyToPause()||await t.once(n.DebuggerModel.Events.DebuggerIsReadyToPause),t.pause())}));export{c as WorkerMainImpl};

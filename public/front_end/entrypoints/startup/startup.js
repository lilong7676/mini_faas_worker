import*as t from"../../core/root/root.js";async function o(o){console.timeStamp("Root.Runtime.startApplication");const e={};for(let t=0;t<Root.allDescriptors.length;++t){const o=Root.allDescriptors[t];e[o.name]=o}const n=Root.applicationDescriptor.modules,i=[],r=[];for(let t=0;t<n.length;++t){const o=n[t],s=o.name;i.push(e[s]),"autostart"===o.type&&r.push(s)}for(let t=0;t<i.length;++t)i[t].name=n[t].name,i[t].condition=n[t].condition;const s=t.Runtime.Runtime.instance({forceNew:!0,moduleDescriptors:i});self.runtime=s,r&&await s.loadAutoStartModules(r),t.Runtime.appStartedPromiseCallback()}self.Root=self.Root||{},Root=Root||{},Root.Runtime=t.Runtime.Runtime,Root.Runtime.experiments=t.Runtime.experiments,Root.Runtime.queryParam=t.Runtime.Runtime.queryParam,Root.runtime,Root.Runtime.loadResourcePromise=t.Runtime.loadResourcePromise,Root.Runtime.Extension=t.Runtime.Extension,Root.Runtime.Module=t.Runtime.Module,self.Runtime=self.Runtime||{},Runtime=Runtime||{},Root.allDescriptors=Root.allDescriptors||[],Root.applicationDescriptor=Root.applicationDescriptor||void 0;var e=Object.freeze({__proto__:null,startApplication:o,startWorker:async function(t){return o().then((function(){self.postMessage("workerReady")}))}});export{e as RuntimeInstantiator};

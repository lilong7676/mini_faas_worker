import*as e from"../../core/common/common.js";import*as t from"../../third_party/wasmparser/wasmparser.js";var s=Object.freeze({__proto__:null,dissambleWASM:function(s,o){try{const r=e.Base64.decode(s.content);let n=new t.WasmParser.BinaryReader;n.setData(r,0,r.byteLength);const a=new t.WasmDis.DevToolsNameGenerator;a.read(n);const i=new Uint8Array(r);n=new t.WasmParser.BinaryReader;const c=new t.WasmDis.WasmDisassembler;c.addOffsets=!0,c.exportMetadata=a.getExportMetadata(),c.nameResolver=a.getNameResolver();const f=[],m=[],l=[],p=1e6;let d=131072,g=new Uint8Array(d),h=0,u=0;for(let e=0;e<i.length;){d>i.length-e&&(d=i.length-e);const t=h+d;if(g.byteLength<t){const e=new Uint8Array(t);e.set(g),g=e}for(;h<t;)g[h++]=i[e++];n.setData(g.buffer,0,t,e===i.length);const s=c.disassembleChunk(n,u),r=c.getResult();for(const e of r.lines)f.push(e);for(const e of r.offsets)m.push(e);for(const e of r.functionBodyOffsets)l.push(e);if(f.length>p){f[p]=";; .... text is truncated due to size",f.splice(p+1),m&&m.splice(p+1);break}if(s)break;if(0===n.position){h=t;continue}const a=n.data.subarray(n.position,n.length);h=a.length,g.set(a),u+=n.position;o({event:"progress",params:{percentage:Math.floor(u/i.length*100)}})}o({event:"progress",params:{percentage:99}});const b=f.join("\n");o({event:"progress",params:{percentage:100}}),o({method:"disassemble",result:{source:b,offsets:m,functionBodyOffsets:l}})}catch(e){o({method:"disassemble",error:e})}}});export{s as WasmParserWorker};

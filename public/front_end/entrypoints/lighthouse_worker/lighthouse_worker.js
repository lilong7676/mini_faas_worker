import*as e from"../../core/root/root.js";import"../../third_party/lighthouse/lighthouse-dt-bundle.js";const s=new class{onMessage;onClose;on(e,s){"message"===e?this.onMessage=s:"close"===e&&(this.onClose=s)}send(e){t("sendProtocolMessage",{message:e})}close(){}};async function o(o){e.Runtime.Runtime.queryParam("isUnderTest")&&(console.log=()=>{},o.flags.maxWaitForLoad=2e3),self.listenForStatus((e=>{t("statusUpdate",{message:e[1]})}));try{const t=await async function(s){const o=self.lookupLocale(s);if("en-US"===o||"en"===o)return;try{let s;const t=e.Runtime.getRemoteBase();if(t&&t.base){const a=`${t.base}third_party/lighthouse/locales/${o}.json`;s=e.Runtime.loadResourcePromise(a)}else{const t=new URL(`../../third_party/lighthouse/locales/${o}.json`,import.meta.url);s=e.Runtime.loadResourcePromise(t.toString())}const a=new Promise(((e,s)=>setTimeout((()=>s(new Error("timed out fetching locale"))),5e3))),l=await Promise.race([a,s]),n=JSON.parse(l);return self.registerLocaleData(o,n),o}catch(e){console.error(e)}return}(o.locales),a=o.flags;a.logLevel=a.logLevel||"info",a.channel="devtools",a.locale=t;const l=self.setUpWorkerConnection(s),n=self.createConfig(o.categoryIDs,a.emulatedFormFactor),r=o.url;return await self.runLighthouse(r,a,n,l)}catch(e){return{fatal:!0,message:e.message,stack:e.stack}}}function t(e,s){self.postMessage(JSON.stringify({method:e,params:s}))}self.onmessage=async e=>{const t=JSON.parse(e.data);if("start"===t.method){const e=await o(t.params);self.postMessage(JSON.stringify({id:t.id,result:e}))}else{if("dispatchProtocolMessage"!==t.method)throw new Error(`Unknown event: ${e.data}`);s.onMessage&&s.onMessage(t.params.message)}},globalThis.global=self,globalThis.global.isVinn=!0,globalThis.global.document={},globalThis.global.document.documentElement={},globalThis.global.document.documentElement.style={WebkitAppearance:"WebkitAppearance"},self.postMessage("workerReady");

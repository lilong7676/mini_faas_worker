import*as t from"../../../core/platform/platform.js";import*as e from"../helpers/helpers.js";import*as s from"../../lit-html/lit-html.js";const n=new CSSStyleSheet;n.replaceSync(":host{white-space:pre;overflow:hidden;display:flex}.prefix{flex:none;color:var(--color-primary)}.text-prompt-input{flex:auto;position:relative}.text-prompt-input input{width:100%;border:none;outline:0;position:absolute;left:0;padding:0;z-index:2;background-color:transparent}.text-prompt-input .suggestion{color:transparent;position:absolute;left:0;z-index:1}.text-prompt-input .suggestion::after{content:attr(suggestion);color:var(--color-background-highlight)}\n/*# sourceURL=textPrompt.css */\n");class i extends Event{static eventName="promptinputchanged";data;constructor(t){super(i.eventName),this.data=t}}class o extends HTMLElement{static litTagName=s.literal`devtools-text-prompt`;#t=this.attachShadow({mode:"open"});#e="";#s="";#n="";connectedCallback(){this.#t.adoptedStyleSheets=[n]}set data(t){this.#e=t.ariaLabel,this.#s=t.prefix,this.#n=t.suggestion,this.render()}get data(){return{ariaLabel:this.#e,prefix:this.#s,suggestion:this.#n}}focus(){this.input().focus()}input(){const t=this.#t.querySelector("input");if(!t)throw new Error("Expected an input element!");return t}moveCaretToEndOfInput(){this.setSelectedRange(this.text().length,this.text().length)}onInput(){this.suggestion().textContent=this.text(),this.dispatchEvent(new i(this.text().trim()))}onKeyDown(e){e.key===t.KeyboardUtilities.ENTER_KEY&&e.preventDefault()}setSelectedRange(t,e){if(t<0)throw new RangeError("Selected range start must be a nonnegative integer");const s=this.text().length;e>s&&(e=s),e<t&&(e=t),this.input().setSelectionRange(t,e)}setPrefix(t){this.#s=t,this.render()}setSuggestion(t){this.#n=t,this.render()}setText(t){this.input().value=t,this.suggestion().textContent=this.text(),this.input().hasFocus()&&(this.moveCaretToEndOfInput(),this.input().scrollIntoView())}suggestion(){const t=this.#t.querySelector(".suggestion");if(!t)throw new Error("Expected an suggestion element!");return t}text(){return this.input().value||""}render(){const t=s.html` <span class="prefix">${this.#s} </span> <span class="text-prompt-input"><input aria-label="${this.#e}" spellcheck="false" @input="${this.onInput}" @keydown="${this.onKeyDown}/"><span class="suggestion" suggestion="${this.#n}"></span></span>`;s.render(t,this.#t,{host:this})}}e.CustomElements.defineComponent("devtools-text-prompt",o);var r=Object.freeze({__proto__:null,PromptInputEvent:i,TextPrompt:o});export{r as TextPrompt};

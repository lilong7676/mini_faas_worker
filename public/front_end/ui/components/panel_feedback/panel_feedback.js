import*as e from"../../../core/host/host.js";import*as t from"../../../core/i18n/i18n.js";import*as i from"../helpers/helpers.js";import*as n from"../../lit-html/lit-html.js";import*as o from"../buttons/buttons.js";import*as r from"../icon_button/icon_button.js";const a={feedback:"Feedback"},s=t.i18n.registerUIStrings("ui/components/panel_feedback/FeedbackButton.ts",a),d=t.i18n.getLocalizedString.bind(void 0,s),l=new URL("../../../Images/feedback_button_icon.svg",import.meta.url).toString();class c extends HTMLElement{static litTagName=n.literal`devtools-feedback-button`;#e=this.attachShadow({mode:"open"});#t=this.render.bind(this);#i={feedbackUrl:""};set data(e){this.#i=e,i.ScheduledRender.scheduleRender(this,this.#t)}#n(){e.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(this.#i.feedbackUrl)}render(){if(!i.ScheduledRender.isScheduledRender(this))throw new Error("FeedbackButton render was not scheduled");n.render(n.html` <${o.Button.Button.litTagName} @click="${this.#n}" .iconUrl="${l}" .variant="${"secondary"}">${d(a.feedback)}</${o.Button.Button.litTagName}> `,this.#e,{host:this})}}i.CustomElements.defineComponent("devtools-feedback-button",c);var p=Object.freeze({__proto__:null,FeedbackButton:c});const h=new CSSStyleSheet;h.replaceSync(":host{display:block}.preview{padding:12px 16px;border:1px solid var(--color-details-hairline);color:var(--color-text-primary);font-size:13px;line-height:20px;border-radius:12px;margin:42px 0;letter-spacing:.01em}h2{color:var(--color-primary);font-size:13px;line-height:20px;letter-spacing:.01em;margin:9px 0 14px;display:flex;align-items:center;gap:5px;font-weight:400}h3{font-size:13px;line-height:20px;letter-spacing:.04em;color:var(--color-text-primary);margin-bottom:2px;font-weight:400}.preview p{margin-bottom:24px}.thumbnail{height:92px}.video{display:flex;flex-flow:row wrap;gap:20px}x-link{color:var(--color-primary);text-decoration-line:underline}x-link.quick-start-link{font-size:14px;line-height:22px;letter-spacing:.04em}.video-description{min-width:min-content;flex-basis:min-content;flex-grow:1}\n/*# sourceURL=panelFeedback.css */\n");const m={previewText:"Our team is actively working on this feature and we would love to know what you think.",previewTextFeedbackLink:"Send us your feedback.",previewFeature:"Preview feature",videoAndDocumentation:"Video and documentation"},u=t.i18n.registerUIStrings("ui/components/panel_feedback/PanelFeedback.ts",m),b=t.i18n.getLocalizedString.bind(void 0,u),k=new URL("../../../Images/ic_preview_feature.svg",import.meta.url).toString(),v=new URL("../../../Images/preview_feature_video_thumbnail.svg",import.meta.url).toString();class g extends HTMLElement{static litTagName=n.literal`devtools-panel-feedback`;#e=this.attachShadow({mode:"open"});#t=this.render.bind(this);#i={feedbackUrl:"",quickStartUrl:"",quickStartLinkText:""};connectedCallback(){this.#e.adoptedStyleSheets=[h]}set data(e){this.#i=e,i.ScheduledRender.scheduleRender(this,this.#t)}render(){if(!i.ScheduledRender.isScheduledRender(this))throw new Error("PanelFeedback render was not scheduled");n.render(n.html` <div class="preview"> <h2 class="flex"> <${r.Icon.Icon.litTagName} .data="${{iconPath:k,width:"24px",height:"24px",color:"var(--color-primary)"}}"></${r.Icon.Icon.litTagName}> ${b(m.previewFeature)} </h2> <p>${b(m.previewText)} <x-link href="${this.#i.feedbackUrl}">${b(m.previewTextFeedbackLink)}</x-link></p> <div class="video"> <div class="thumbnail"> <img src="${v}" role="presentation"> </div> <div class="video-description"> <h3>${b(m.videoAndDocumentation)}</h3> <x-link class="quick-start-link" href="${this.#i.quickStartUrl}">${this.#i.quickStartLinkText}</x-link> </div> </div> </div> `,this.#e,{host:this})}}i.CustomElements.defineComponent("devtools-panel-feedback",g);var x=Object.freeze({__proto__:null,PanelFeedback:g});export{p as FeedbackButton,x as PanelFeedback};

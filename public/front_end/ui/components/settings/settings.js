import*as e from"../helpers/helpers.js";import*as t from"../../lit-html/lit-html.js";const i=new CSSStyleSheet;i.replaceSync(":host{padding:0;margin:0}input{height:12px;width:12px}label{display:inline-flex;align-items:center;overflow:hidden;text-overflow:ellipsis}p{margin:12px 0}:host-context(.-theme-with-dark-background) input[type=checkbox]:not(.-theme-preserve){accent-color:var(--color-checkbox-accent-color)}\n/*# sourceURL=settingCheckbox.css */\n");class s extends HTMLElement{static litTagName=t.literal`setting-checkbox`;#e=this.attachShadow({mode:"open"});#t;#i=!1;#s;connectedCallback(){this.#e.adoptedStyleSheets=[i]}set data(e){this.#s&&this.#t&&this.#t.removeChangeListener(this.#s.listener),this.#t=e.setting,this.#i=Boolean(e.disabled),this.#s=this.#t.addChangeListener((()=>{this.render()})),this.render()}render(){if(!this.#t)throw new Error('No "Setting" object provided for rendering');t.render(t.html` <p> <label> <input type="checkbox" ?checked="${this.#t.get()}" ?disabled="${this.#i}" @change="${this.checkboxChanged}" aria-label="${this.#t.title()}"> ${this.#t.title()} </label> `,this.#e,{host:this})}checkboxChanged(e){this.#t?.set(e.target.checked)}}e.CustomElements.defineComponent("setting-checkbox",s);var n=Object.freeze({__proto__:null,SettingCheckbox:s});export{n as SettingCheckbox};

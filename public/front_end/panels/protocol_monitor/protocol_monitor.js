import*as e from"../../core/host/host.js";import*as t from"../../core/i18n/i18n.js";import*as o from"../../core/platform/platform.js";import*as r from"../../core/protocol_client/protocol_client.js";import*as s from"../../core/sdk/sdk.js";import*as i from"../../models/bindings/bindings.js";import*as a from"../../models/text_utils/text_utils.js";import*as n from"../../ui/components/data_grid/data_grid.js";import*as d from"../../ui/components/icon_button/icon_button.js";import*as l from"../../ui/legacy/components/source_frame/source_frame.js";import*as c from"../../ui/legacy/legacy.js";import*as g from"../../ui/lit-html/lit-html.js";const m=new CSSStyleSheet;m.replaceSync(".protocol-monitor{--override-data-grid-sent-message-row-background-color:rgb(240 246 255)}.-theme-with-dark-background .protocol-monitor,:host-context(.-theme-with-dark-background) .protocol-monitor{--override-data-grid-sent-message-row-background-color:rgb(43 46 56)}.protocol-monitor .protocol-monitor-toolbar{border-bottom:1px solid var(--color-details-hairline)}.protocol-monitor .protocol-monitor-bottom-toolbar{border-top:1px solid var(--color-details-hairline)}\n/*# sourceURL=protocolMonitor.css */\n");const p={method:"Method",type:"Type",request:"Request",response:"Response",timestamp:"Timestamp",target:"Target",record:"Record",clearAll:"Clear all",filter:"Filter",documentation:"Documentation",sMs:"{PH1} ms",noMessageSelected:"No message selected",save:"Save",session:"Session",sendRawCDPCommand:"Send a raw `CDP` command"},h=t.i18n.registerUIStrings("panels/protocol_monitor/ProtocolMonitor.ts",p),u=t.i18n.getLocalizedString.bind(void 0,h),b=e=>g.html`${u(p.sMs,{PH1:String(e)})}`;let w;class I extends c.Widget.VBox{started;startTime;dataGridRowForId;infoWidget;dataGridIntegrator;filterParser;suggestionBuilder;textFilterUI;messages=[];isRecording=!1;constructor(){super(!0),this.started=!1,this.startTime=0,this.dataGridRowForId=new Map;const t=new c.Toolbar.Toolbar("protocol-monitor-toolbar",this.contentElement);this.contentElement.classList.add("protocol-monitor");const o=new c.Toolbar.ToolbarToggle(u(p.record),"largeicon-start-recording","largeicon-stop-recording");o.addEventListener(c.Toolbar.ToolbarButton.Events.Click,(()=>{o.setToggled(!o.toggled()),this.setRecording(o.toggled())})),o.setToggleWithRedColor(!0),t.appendToolbarItem(o),o.setToggled(!0);const s=new c.Toolbar.ToolbarButton(u(p.clearAll),"largeicon-clear");s.addEventListener(c.Toolbar.ToolbarButton.Events.Click,(()=>{this.messages=[],this.dataGridIntegrator.update({...this.dataGridIntegrator.data(),rows:[]}),this.infoWidget.render(null)})),t.appendToolbarItem(s);const i=new c.Toolbar.ToolbarButton(u(p.save),"largeicon-download");i.addEventListener(c.Toolbar.ToolbarButton.Events.Click,(()=>{this.saveAsFile()})),t.appendToolbarItem(i);const d=new c.SplitWidget.SplitWidget(!0,!0,"protocol-monitor-panel-split",250);d.show(this.contentElement),this.infoWidget=new v;const l={columns:[{id:"type",title:u(p.type),sortable:!0,widthWeighting:1,visible:!0,hideable:!0,styles:{"text-align":"center"}},{id:"method",title:u(p.method),sortable:!1,widthWeighting:5,visible:!0,hideable:!1},{id:"request",title:u(p.request),sortable:!1,widthWeighting:5,visible:!0,hideable:!0},{id:"response",title:u(p.response),sortable:!1,widthWeighting:5,visible:!0,hideable:!0},{id:"timestamp",title:u(p.timestamp),sortable:!0,widthWeighting:5,visible:!1,hideable:!0},{id:"target",title:u(p.target),sortable:!0,widthWeighting:5,visible:!1,hideable:!0},{id:"session",title:u(p.session),sortable:!0,widthWeighting:5,visible:!1,hideable:!0}],rows:[],contextMenus:{bodyRow:(t,o,r)=>{const s=n.DataGridUtils.getRowEntryForColumnId(r,"method"),i=n.DataGridUtils.getRowEntryForColumnId(r,"type");t.defaultSection().appendItem(u(p.filter),(()=>{const e=n.DataGridUtils.getRowEntryForColumnId(r,"method");this.textFilterUI.setValue(`method:${e.value}`,!0)})),t.defaultSection().appendItem(u(p.documentation),(()=>{if(!s.value)return;const[t,o]=String(s.value).split("."),r="sent"===i.value?"method":"event";e.InspectorFrontendHost.InspectorFrontendHostInstance.openInNewTab(`https://chromedevtools.github.io/devtools-protocol/tot/${t}#${r}-${o}`)}))}}};this.dataGridIntegrator=new n.DataGridControllerIntegrator.DataGridControllerIntegrator(l),this.dataGridIntegrator.dataGrid.addEventListener("cellfocused",(e=>{const t=e.data.row,o={request:n.DataGridUtils.getRowEntryForColumnId(t,"request"),response:n.DataGridUtils.getRowEntryForColumnId(t,"response"),type:n.DataGridUtils.getRowEntryForColumnId(t,"type").title};this.infoWidget.render(o)})),this.dataGridIntegrator.dataGrid.addEventListener("newuserfiltertext",(e=>{this.textFilterUI.setValue(e.data.filterText,!0)})),d.setMainWidget(this.dataGridIntegrator),d.setSidebarWidget(this.infoWidget);const g=["method","request","response","type","target","session"];this.filterParser=new a.TextUtils.FilterParser(g),this.suggestionBuilder=new c.FilterSuggestionBuilder.FilterSuggestionBuilder(g),this.textFilterUI=new c.Toolbar.ToolbarInput(u(p.filter),"",1,.2,"",this.suggestionBuilder.completions.bind(this.suggestionBuilder),!0),this.textFilterUI.addEventListener(c.Toolbar.ToolbarInput.Event.TextChanged,(e=>{const t=e.data,o=this.filterParser.parse(t);this.dataGridIntegrator.update({...this.dataGridIntegrator.data(),filters:o})})),t.appendToolbarItem(this.textFilterUI);const m=new c.Toolbar.ToolbarInput(u(p.sendRawCDPCommand),"",1,.2,"",void 0,!1);m.addEventListener(c.Toolbar.ToolbarInput.Event.EnterPressed,(()=>{const e=m.value();let t=null;try{t=JSON.parse(e)}catch(e){}const o=t?t.command:e,s=t?t.parameters:null;r.InspectorBackend.test.sendRawMessage(o,s,(()=>{}))}));new c.Toolbar.Toolbar("protocol-monitor-bottom-toolbar",this.contentElement).appendToolbarItem(m)}static instance(e={forceNew:null}){const{forceNew:t}=e;return w&&!t||(w=new I),w}wasShown(){this.started||(this.registerCSSFiles([m]),this.started=!0,this.startTime=Date.now(),this.setRecording(!0))}setRecording(e){this.isRecording=e;const t=r.InspectorBackend.test;e?(t.onMessageSent=this.messageSent.bind(this),t.onMessageReceived=this.messageReceived.bind(this)):(t.onMessageSent=null,t.onMessageReceived=null)}targetToString(e){return e?e.decorateLabel(`${e.name()} ${e===s.TargetManager.TargetManager.instance().mainTarget()?"":e.id()}`):""}messageReceived(e,t){if(this.isRecording&&this.messages.push({...e,type:"recv",domain:"-"}),"id"in e&&e.id){const t=this.dataGridRowForId.get(e.id);if(!t)return;const o=this.dataGridIntegrator.data().rows.findIndex((e=>t===e)),r={...t,cells:t.cells.map((t=>"response"===t.columnId?{...t,value:JSON.stringify(e.result||e.error)}:t))},s=[...this.dataGridIntegrator.data().rows];return s[o]=r,this.dataGridRowForId.delete(e.id),void this.dataGridIntegrator.update({...this.dataGridIntegrator.data(),rows:s})}const o=t,r=new d.Icon.Icon;r.data={iconName:"ic_response",color:"var(--color-text-disabled)",width:"16px",height:"16px"};const s={cells:[{columnId:"method",value:e.method},{columnId:"request",value:"",renderer:n.DataGridRenderers.codeBlockRenderer},{columnId:"response",value:JSON.stringify(e.params),renderer:n.DataGridRenderers.codeBlockRenderer},{columnId:"timestamp",value:Date.now()-this.startTime,renderer:b},{columnId:"type",value:r,title:"received"},{columnId:"target",value:this.targetToString(o)},{columnId:"session",value:e.sessionId||""}],hidden:!1};this.dataGridIntegrator.update({...this.dataGridIntegrator.data(),rows:this.dataGridIntegrator.data().rows.concat([s])})}messageSent(e,t){this.isRecording&&this.messages.push({...e,type:"send"});const o=t,r=new d.Icon.Icon;r.data={iconName:"ic_request_response",color:"var(--color-primary)",width:"16px",height:"16px"};const s={styles:{"--override-data-grid-row-background-color":"var(--override-data-grid-sent-message-row-background-color)"},cells:[{columnId:"method",value:e.method},{columnId:"request",value:JSON.stringify(e.params),renderer:n.DataGridRenderers.codeBlockRenderer},{columnId:"response",value:"(pending)",renderer:n.DataGridRenderers.codeBlockRenderer},{columnId:"timestamp",value:Date.now()-this.startTime,renderer:b},{columnId:"type",value:r,title:"sent"},{columnId:"target",value:this.targetToString(o)},{columnId:"session",value:e.sessionId||""}],hidden:!1};this.dataGridRowForId.set(e.id,s),this.dataGridIntegrator.update({...this.dataGridIntegrator.data(),rows:this.dataGridIntegrator.data().rows.concat([s])})}async saveAsFile(){const e=new Date,t="ProtocolMonitor-"+o.DateUtilities.toISO8601Compact(e)+".json",r=new i.FileUtils.FileOutputStream;await r.open(t)&&(r.write(JSON.stringify(this.messages,null,"  ")),r.close())}}class v extends c.Widget.VBox{tabbedPane;constructor(){super(),this.tabbedPane=new c.TabbedPane.TabbedPane,this.tabbedPane.appendTab("request",u(p.request),new c.Widget.Widget),this.tabbedPane.appendTab("response",u(p.response),new c.Widget.Widget),this.tabbedPane.show(this.contentElement),this.tabbedPane.selectTab("response"),this.render(null)}render(e){if(!e||!e.request||!e.response)return this.tabbedPane.changeTabView("request",new c.EmptyWidget.EmptyWidget(u(p.noMessageSelected))),void this.tabbedPane.changeTabView("response",new c.EmptyWidget.EmptyWidget(u(p.noMessageSelected)));const t=e&&e.type&&"sent"===e.type;this.tabbedPane.setTabEnabled("request",Boolean(t)),t||this.tabbedPane.selectTab("response");const o=JSON.parse(String(e.request.value)||"null");this.tabbedPane.changeTabView("request",l.JSONView.JSONView.createViewSync(o));const r="(pending)"===e.response.value?null:JSON.parse(String(e.response.value)||"null");this.tabbedPane.changeTabView("response",l.JSONView.JSONView.createViewSync(r))}}var T=Object.freeze({__proto__:null,ProtocolMonitorImpl:I,InfoWidget:v});export{T as ProtocolMonitor};

import*as e from"../../../core/i18n/i18n.js";import*as t from"../../../core/sdk/sdk.js";import*as r from"../../../ui/components/helpers/helpers.js";import*as s from"../../../ui/components/icon_button/icon_button.js";import*as o from"../../../ui/components/report_view/report_view.js";import*as i from"../../../ui/legacy/legacy.js";import*as a from"../../../ui/lit-html/lit-html.js";const n=new CSSStyleSheet;n.replaceSync(".code{font-family:var(--monospace-font-family);font-size:var(--monospace-font-size)}.issuers-list{display:flex;flex-direction:column;list-style-type:none;padding:0;margin:0}.status-icon{margin:0 .3em 2px 0;vertical-align:middle}\n/*# sourceURL=RequestTrustTokensView.css */\n");const l={parameters:"Parameters",type:"Type",refreshPolicy:"Refresh policy",issuers:"Issuers",topLevelOrigin:"Top level origin",issuer:"Issuer",result:"Result",status:"Status",numberOfIssuedTokens:"Number of issued tokens",success:"Success",failure:"Failure",theOperationsResultWasServedFrom:"The operations result was served from cache.",theOperationWasFulfilledLocally:"The operation was fulfilled locally, no request was sent.",aClientprovidedArgumentWas:"A client-provided argument was malformed or otherwise invalid.",eitherNoInputsForThisOperation:"Either no inputs for this operation are available or the output exceeds the operations quota.",theServersResponseWasMalformedOr:"The servers response was malformed or otherwise invalid.",theOperationFailedForAnUnknown:"The operation failed for an unknown reason."},u=e.i18n.registerUIStrings("panels/network/components/RequestTrustTokensView.ts",l),p=e.i18n.getLocalizedString.bind(void 0,u);class d extends i.Widget.VBox{reportView=new h;request;constructor(e){super(),this.request=e,this.contentElement.appendChild(this.reportView)}wasShown(){this.request.addEventListener(t.NetworkRequest.Events.TrustTokenResultAdded,this.refreshReportView,this),this.refreshReportView()}willHide(){this.request.removeEventListener(t.NetworkRequest.Events.TrustTokenResultAdded,this.refreshReportView,this)}refreshReportView(){this.reportView.data={params:this.request.trustTokenParams(),result:this.request.trustTokenOperationDoneEvent()}}}class h extends HTMLElement{static litTagName=a.literal`devtools-trust-token-report`;shadow=this.attachShadow({mode:"open"});trustTokenData;set data(e){this.trustTokenData=e,this.render()}connectedCallback(){this.shadow.adoptedStyleSheets=[n]}render(){if(!this.trustTokenData)throw new Error("Trying to render a Trust Token report without providing data");a.render(a.html`<${o.ReportView.Report.litTagName}> ${this.renderParameterSection()} ${this.renderResultSection()} </${o.ReportView.Report.litTagName}> `,this.shadow,{host:this})}renderParameterSection(){return this.trustTokenData&&this.trustTokenData.params?a.html` <${o.ReportView.ReportSectionHeader.litTagName}>${p(l.parameters)}</${o.ReportView.ReportSectionHeader.litTagName}> ${w(p(l.type),this.trustTokenData.params.type.toString())} ${this.renderRefreshPolicy(this.trustTokenData.params)} ${this.renderIssuers(this.trustTokenData.params)} ${this.renderIssuerAndTopLevelOriginFromResult()} <${o.ReportView.ReportSectionDivider.litTagName}></${o.ReportView.ReportSectionDivider.litTagName}> `:a.nothing}renderRefreshPolicy(e){return"Redemption"!==e.type?a.nothing:w(p(l.refreshPolicy),e.refreshPolicy.toString())}renderIssuers(e){return e.issuers&&0!==e.issuers.length?a.html` <${o.ReportView.ReportKey.litTagName}>${p(l.issuers)}</${o.ReportView.ReportKey.litTagName}> <${o.ReportView.ReportValue.litTagName}> <ul class="issuers-list"> ${e.issuers.map((e=>a.html`<li>${e}`))} </ul> </${o.ReportView.ReportValue.litTagName}> `:a.nothing}renderIssuerAndTopLevelOriginFromResult(){return this.trustTokenData&&this.trustTokenData.result?a.html` ${T(p(l.topLevelOrigin),this.trustTokenData.result.topLevelOrigin)} ${T(p(l.issuer),this.trustTokenData.result.issuerOrigin)}`:a.nothing}renderResultSection(){return this.trustTokenData&&this.trustTokenData.result?a.html` <${o.ReportView.ReportSectionHeader.litTagName}>${p(l.result)}</${o.ReportView.ReportSectionHeader.litTagName}> <${o.ReportView.ReportKey.litTagName}>${p(l.status)}</${o.ReportView.ReportKey.litTagName}> <${o.ReportView.ReportValue.litTagName}> <span> <${s.Icon.Icon.litTagName} class="status-icon" .data="${e=this.trustTokenData.result.status,R(e)?c:m}"> </${s.Icon.Icon.litTagName}> <strong>${function(e){return R(e)?p(l.success):p(l.failure)}(this.trustTokenData.result.status)}</strong> ${function(e){switch(e){case"Ok":return null;case"AlreadyExists":return p(l.theOperationsResultWasServedFrom);case"FulfilledLocally":return p(l.theOperationWasFulfilledLocally);case"InvalidArgument":return p(l.aClientprovidedArgumentWas);case"ResourceExhausted":return p(l.eitherNoInputsForThisOperation);case"BadResponse":return p(l.theServersResponseWasMalformedOr);case"FailedPrecondition":case"Unavailable":case"InternalError":case"UnknownError":return p(l.theOperationFailedForAnUnknown)}}(this.trustTokenData.result.status)} </span> </${o.ReportView.ReportValue.litTagName}> ${this.renderIssuedTokenCount(this.trustTokenData.result)} <${o.ReportView.ReportSectionDivider.litTagName}></${o.ReportView.ReportSectionDivider.litTagName}> `:a.nothing;var e}renderIssuedTokenCount(e){return"Issuance"!==e.type?a.nothing:T(p(l.numberOfIssuedTokens),e.issuedTokenCount)}}const c={color:"rgb(12, 164, 12)",iconName:"ic_checkmark_16x16",width:"12px"},m={color:"",iconName:"error_icon",width:"12px"};function R(e){return"Ok"===e||"AlreadyExists"===e||"FulfilledLocally"===e}function T(e,t){return void 0===t?a.nothing:a.html` <${o.ReportView.ReportKey.litTagName}>${e}</${o.ReportView.ReportKey.litTagName}> <${o.ReportView.ReportValue.litTagName}>${t}</${o.ReportView.ReportValue.litTagName}> `}function w(e,t){return a.html` <${o.ReportView.ReportKey.litTagName}>${e}</${o.ReportView.ReportKey.litTagName}> <${o.ReportView.ReportValue.litTagName} class="code">${t}</${o.ReportView.ReportValue.litTagName}> `}r.CustomElements.defineComponent("devtools-trust-token-report",h);var g=Object.freeze({__proto__:null,RequestTrustTokensView:d,RequestTrustTokensReport:h,statusConsideredSuccess:R});export{g as RequestTrustTokensView};
